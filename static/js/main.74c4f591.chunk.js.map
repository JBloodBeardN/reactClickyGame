{"version":3,"sources":["components/GameCard.js","components/ClickGame.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","react_default","a","createElement","onClick","compareSelection","className","alt","src","href","ClickGame","state","topScore","currentScore","images","selectedImages","setTopScore","_this","setState","iterateCurrentScore","cb","resetCurrentScoreAndEmptySelectedImagesArray","setRandomOrder","newImages","map","elem","index","Math","random","image","sort","b","event","console","log","target","indexOf","newSelectedImages","concat","Object","toConsumableArray","componentDidMount","_this2","this","components_GameCard","React","Component","App","components_ClickGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAUeA,MARf,SAAkBC,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,QAASJ,EAAMK,iBAAkBC,UAAU,8BAChDL,EAAAC,EAAAC,cAAA,OAAKI,IAAI,cAAcC,IAAKR,EAAMS,SC2E3BC,6MA1EbC,MAAQ,CACNC,SAAU,EACVC,aAAc,EACdC,OAAQ,CAAC,sDAAuD,uDAAuD,sDAAsD,wDAC7KC,eAAe,MAGjBC,YAAc,WACPC,EAAKN,MAAME,eAAiBI,EAAKN,MAAMC,UAC3CK,EAAKC,SAAS,CAAEN,SAAUK,EAAKN,MAAME,aAAc,OAItDM,oBAAsB,SAACC,GACpBH,EAAKC,SAAS,CAAEL,aAAcI,EAAKN,MAAME,aAAe,IACxDO,OAGHC,6CAA+C,WAC5CJ,EAAKC,SAAS,CAAEL,aAAc,IAC9BI,EAAKC,SAAS,CAACH,eAAgB,QAGlCO,eAAiB,WACb,IAKIC,EALmBN,EAAKN,MAAMG,OAAOU,IAAI,SAAAC,GAC3C,MAAO,CAACC,MAASC,KAAKC,SAC1BC,MAASJ,KAGwBK,KAAK,SAAS5B,EAAG6B,GAC1C,OAAO7B,EAAEwB,MAAMK,EAAEL,QAEtBH,EAAYA,EAAUC,IAAI,SAAAC,GAAI,OAAIA,EAAKI,QAC1CZ,EAAKC,SAAS,CAAEJ,OAAQS,OAG1BlB,iBAAmB,SAAC2B,GAGhB,GAFAC,QAAQC,IAAIF,EAAMG,QAClBF,QAAQC,IAAIjB,EAAKN,MAAMI,gBACpBE,EAAKN,MAAMI,eAAeqB,QAAQJ,EAAMG,OAAO3B,KAAK,CACnDS,EAAKD,cACL,IAAIqB,EAAiB,CAAIL,EAAMG,OAAO3B,KAAjB8B,OAAAC,OAAAC,EAAA,EAAAD,CAAyBtB,EAAKN,MAAMI,iBAC3DE,EAAKC,SAAS,CACVL,aAAcI,EAAKN,MAAME,aAAc,EACvCE,eAAgBsB,SAGpBpB,EAAKI,+CACLJ,EAAKK,oBAKXmB,kBAAoB,WAChBR,QAAQC,IAAI,8FAMP,IAAAQ,EAAAC,KACP,OACA1C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACfL,EAAAC,EAAAC,cAAA,uBAAewC,KAAKhC,MAAMC,UAC1BX,EAAAC,EAAAC,cAAA,yBAAiBwC,KAAKhC,MAAME,cAC1BZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACZqC,KAAKhC,MAAMG,OAAOU,IAAI,SAAAC,GACnB,OAAQxB,EAAAC,EAAAC,cAACyC,EAAD,CAAUvC,iBAAkBqC,EAAKrC,iBAAkBI,KAAMgB,eArErDoB,IAAMC,WCGfC,MAJf,WACE,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.74c4f591.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction GameCard(props) {\r\n    return (\r\n        <div onClick={props.compareSelection} className=\"col-md-3 col-sm-4 col-xs-6\">\r\n        <img alt=\"placeholder\" src={props.href} ></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameCard;","import React from \"react\";\r\nimport GameCard from \"./GameCard\";\r\n\r\n// By extending the React.Component class, Counter inherits functionality from it\r\nclass ClickGame extends React.Component {\r\n  // Setting the initial state of the Counter component\r\n  state = {\r\n    topScore: 0,\r\n    currentScore: 0,\r\n    images: [\"https://via.placeholder.com/200x200?text=firstImage\", \"https://via.placeholder.com/200x200?text=secondImage\",\"https://via.placeholder.com/200x200?text=thirdImage\",\"https://via.placeholder.com/200x200?text=fourthImage\",],\r\n    selectedImages:[]\r\n  };\r\n\r\n  setTopScore = () => {\r\n      if(this.state.currentScore === this.state.topScore){\r\n     this.setState({ topScore: this.state.currentScore +1 });\r\n      } \r\n  };\r\n\r\n  iterateCurrentScore = (cb) => {\r\n     this.setState({ currentScore: this.state.currentScore + 1 });\r\n     cb();\r\n  };\r\n\r\n  resetCurrentScoreAndEmptySelectedImagesArray = () => {\r\n     this.setState({ currentScore: 0});\r\n     this.setState({selectedImages: []});\r\n  };\r\n\r\n  setRandomOrder = () => {\r\n      const randomizeArray = this.state.images.map(elem => {\r\n        return {\"index\": Math.random(),\r\n    \"image\": elem};\r\n      })\r\n\r\n      let newImages = randomizeArray.sort(function(a, b){\r\n            return a.index-b.index\r\n        });\r\n       newImages = newImages.map(elem => elem.image);\r\n    this.setState({ images: newImages });\r\n  };\r\n\r\n  compareSelection = (event) => {\r\n      console.log(event.target);\r\n      console.log(this.state.selectedImages);\r\n      if(this.state.selectedImages.indexOf(event.target.src)){\r\n          this.setTopScore();\r\n          let newSelectedImages = [event.target.src, ...this.state.selectedImages]\r\n        this.setState({\r\n            currentScore: this.state.currentScore +1,\r\n            selectedImages: newSelectedImages            \r\n        })  \r\n      }else{\r\n        this.resetCurrentScoreAndEmptySelectedImagesArray()\r\n        this.setRandomOrder();\r\n        \r\n      }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n      console.log('componentDidMount');\r\n    // We always use the setState method to update a component's state\r\n    // this.setState({ count: this.state.count - 1 });\r\n  };\r\n\r\n  // The render method returns the JSX that should be rendered\r\n  render() {\r\n    return (\r\n    <div className=\"container\">\r\n    <h1>TopScore: {this.state.topScore}</h1>\r\n    <h2>User Score: {this.state.currentScore}</h2>\r\n      <div className=\"row\">\r\n        {this.state.images.map(elem => {\r\n            return (<GameCard compareSelection={this.compareSelection} href={elem}></GameCard>);}\r\n        )}\r\n      </div></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClickGame;","import React from 'react';\nimport ClickGame from './components/ClickGame';\n\nfunction App() { \n  return <ClickGame />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}